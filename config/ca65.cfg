MEMORY {

    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
	ROM_00:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_01:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_02:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
    ROM_03:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_04:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_05:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
    ROM_06:     start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_07:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_08:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_09:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0A:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0B:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0C:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0D:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0E:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_0F:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_10:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_11:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_12:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_13:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_14:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_15:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_16:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_17:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_18:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_19:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_1A:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_1B:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_1C:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
	ROM_1D:		start = $8000, size = $4000, file = %O, fill = yes, define = no;
    ROM_1E:     start = $8000, size = $4000, file = %O, fill = yes, define = no;

	PRG:		start = $c000, size = $3c00, file = %O, fill = yes, define = no;
    DMC: 		start = $fc00, size = $03f0, file = %O, fill = yes, define = yes;
    STUB:       start = $fff0, size = $0010, file = %O, fill = yes, define = yes;


    RAM:		start = $0300, size = $0500, define = yes;

	  # Use this definition instead if you going to use extra 8K RAM
	  # RAM: start = $6000, size = $2000, define = yes;
	  
}

SEGMENTS {

    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
    ROM_00:		load = ROM_00,	type = ro, define = no;
	ROM_01:		load = ROM_01,	type = ro, define = no;
	ROM_02:		load = ROM_02,	type = ro, define = no;
    ROM_03:		load = ROM_03,	type = ro, define = no;
	ROM_04:		load = ROM_04,	type = ro, define = no;
	ROM_05:		load = ROM_05,	type = ro, define = no;
    ROM_06:		load = ROM_06,	type = ro, define = no;
    ROM_07:		load = ROM_07,	type = ro, define = no;
    ROM_08:		load = ROM_08,	type = ro, define = no;
    ROM_09:		load = ROM_09,	type = ro, define = no;
    ROM_0A:		load = ROM_0A,	type = ro, define = no;
    ROM_0B:		load = ROM_0B,	type = ro, define = no;
    ROM_0C:		load = ROM_0C,	type = ro, define = no;
    ROM_0D:		load = ROM_0D,	type = ro, define = no;
    ROM_0E:		load = ROM_0E,	type = ro, define = no;
    ROM_0F:		load = ROM_0F,	type = ro, define = no;
    ROM_10:		load = ROM_10,	type = ro, define = no;
    ROM_11:		load = ROM_11,	type = ro, define = no;
    ROM_12:		load = ROM_12,	type = ro, define = no;
    ROM_13:		load = ROM_13,	type = ro, define = no;
    ROM_14:		load = ROM_14,	type = ro, define = no;
    ROM_15:		load = ROM_15,	type = ro, define = no;
    ROM_16:		load = ROM_16,	type = ro, define = no;
    ROM_17:		load = ROM_17,	type = ro, define = no;
    ROM_18:		load = ROM_18,	type = ro, define = no;
    ROM_19:		load = ROM_19,	type = ro, define = no;
    ROM_1A:		load = ROM_1A,	type = ro, define = no;
    ROM_1B:		load = ROM_1B,	type = ro, define = no;
    ROM_1C:		load = ROM_1C,	type = ro, define = no;
    ROM_1D:		load = ROM_1D,	type = ro, define = no;
    ROM_1E:		load = ROM_1E,	type = ro, define = no;

    STUB: load = STUB, type = ro, define = no;

    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;

    DMC:      load = DMC,            type = ro;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
		
}

SYMBOLS {
    __STACKSIZE__: value = $0500, type = weak; # 5 pages stack
    
    # WARNING: If you change this next variable, you also need to update its sibling _contants.asm file, in the same
    #          folder. The value of SYS_PRG_BANKS must equal the value of NES_PRG_BANKS
    NES_PRG_BANKS: value = 32, type = weak;   # number of 16K PRG banks, change to 2 for NROM256
    NES_CHR_BANKS: value = 0, type = weak;  # number of 8K CHR banks (If using 4k, divide by 2!)

}